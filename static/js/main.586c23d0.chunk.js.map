{"version":3,"sources":["contexts/BookContext.jsx","components/Navbar.jsx","components/BookDetails.jsx","components/BookList.jsx","components/BookForm.jsx","App.js","serviceWorker.js","index.js"],"names":["BookContext","createContext","BookContextProvider","props","useState","localData","localStorage","getItem","JSON","parse","books","setBooks","useEffect","console","log","setItem","stringify","Provider","value","addBook","title","author","id","uuid","removeBook","filter","book","children","Navbar","useContext","coffee","length","className","BookDetails","onClick","BookList","map","key","BookForm","setTitle","setAuthor","onSubmit","e","preventDefault","type","placeholder","onChange","target","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kMAGaA,EAAcC,0BA2BZC,EAzBa,SAACC,GAAW,IAAD,EACXC,oBAAS,WAEjC,IAAMC,EAAYC,aAAaC,QAAQ,SAGvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,MANR,mBAC9BK,EAD8B,KACvBC,EADuB,KAkBrC,OAJAC,qBAAU,WACRC,QAAQC,IAAI,WACZR,aAAaS,QAAQ,QAASP,KAAKQ,UAAUN,MAC5C,CAACA,IAEF,kBAACV,EAAYiB,SAAb,CAAsBC,MAAO,CAAEC,QAXjB,SAACC,EAAOC,GACtBV,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAAEU,QAAOC,SAAQC,GAAIC,sBAUDC,WARvB,SAACF,GAClBX,EAASD,EAAMe,QAAO,SAACC,GAAD,OAAUA,EAAKJ,KAAOA,OAOQZ,UACjDP,EAAMwB,WCTEC,EAbA,WAAO,IACZlB,EAAUmB,qBAAW7B,GAArBU,MACFoB,EAA0B,IAAjBpB,EAAMqB,OAAN,eAAsC,GACrD,OACE,yBAAKC,UAAU,UACb,kDACA,iDACsBtB,EAAMqB,OAD5B,0BAC2DD,KCGlDG,EAVK,SAAC,GAAc,IAAZP,EAAW,EAAXA,KACbF,EAAeK,qBAAW7B,GAA1BwB,WACR,OACE,wBAAIU,QAAS,kBAAMV,EAAWE,EAAKJ,MACjC,yBAAKU,UAAU,SAASN,EAAKN,OAC7B,yBAAKY,UAAU,UAAUN,EAAKL,UCJvBc,EAAW,WAAO,IACrBzB,EAAUmB,qBAAW7B,GAArBU,MACR,OAAOA,EAAMqB,OACX,yBAAKC,UAAU,aACb,4BACGtB,EAAM0B,KAAI,SAACV,GACV,OAAO,kBAAC,EAAD,CAAaW,IAAKX,EAAKJ,GAAII,KAAMA,SAK9C,yBAAKM,UAAU,SAAf,6CCoBWM,EAhCE,WAAO,IACdnB,EAAYU,qBAAW7B,GAAvBmB,QADa,EAGKf,mBAAS,IAHd,mBAGdgB,EAHc,KAGPmB,EAHO,OAIOnC,mBAAS,IAJhB,mBAIdiB,EAJc,KAINmB,EAJM,KAWrB,OACE,0BAAMC,SAPa,SAACC,GACpBA,EAAEC,iBACFxB,EAAQC,EAAOC,GACfmB,EAAU,IACVD,EAAS,MAIP,2BACEK,KAAK,OACLC,YAAY,aACZ3B,MAAOE,EACP0B,SAAU,SAACJ,GAAD,OAAOH,EAASG,EAAEK,OAAO7B,QACnC8B,UAAQ,IAEV,2BACEJ,KAAK,OACLC,YAAY,cACZ3B,MAAOG,EACPyB,SAAU,SAACJ,GAAD,OAAOF,EAAUE,EAAEK,OAAO7B,QACpC8B,UAAQ,IAEV,2BAAOJ,KAAK,SAAS1B,MAAM,eCZlB+B,MAZf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,a","file":"static/js/main.586c23d0.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\nimport { uuid } from \"uuidv4\";\r\n\r\nexport const BookContext = createContext();\r\n\r\nconst BookContextProvider = (props) => {\r\n  const [books, setBooks] = useState(() => {\r\n    // added local storage\r\n    const localData = localStorage.getItem(\"books\");\r\n    // ternary operator to check if localData has data return it as an object using JSON.parse\r\n    // else return empty array as the default value for \"books\"\r\n    return localData ? JSON.parse(localData) : [];\r\n  });\r\n  const addBook = (title, author) => {\r\n    setBooks([...books, { title, author, id: uuid() }]);\r\n  };\r\n  const removeBook = (id) => {\r\n    setBooks(books.filter((book) => book.id !== id));\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"Mounted\");\r\n    localStorage.setItem(\"books\", JSON.stringify(books));\r\n  }, [books]);\r\n  return (\r\n    <BookContext.Provider value={{ addBook, removeBook, books }}>\r\n      {props.children}\r\n    </BookContext.Provider>\r\n  );\r\n};\r\n\r\nexport default BookContextProvider;\r\n","import React, { useContext } from \"react\";\r\nimport { BookContext } from \"../contexts/BookContext\";\r\n\r\nconst Navbar = () => {\r\n  const { books } = useContext(BookContext);\r\n  const coffee = books.length !== 0 ? `need coffee?` : \"\";\r\n  return (\r\n    <div className=\"navbar\">\r\n      <h1>Bestie's Book List</h1>\r\n      <p>\r\n        Currently you have {books.length} book(s) to complete...{coffee}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useContext } from \"react\";\r\nimport { BookContext } from \"../contexts/BookContext\";\r\n\r\nconst BookDetails = ({ book }) => {\r\n  const { removeBook } = useContext(BookContext);\r\n  return (\r\n    <li onClick={() => removeBook(book.id)}>\r\n      <div className=\"title\">{book.title}</div>\r\n      <div className=\"author\">{book.author}</div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default BookDetails;\r\n","import React, { useContext } from \"react\";\r\nimport { BookContext } from \"../contexts/BookContext\";\r\nimport BookDetails from \"./BookDetails\";\r\n\r\nexport const BookList = () => {\r\n  const { books } = useContext(BookContext);\r\n  return books.length ? (\r\n    <div className=\"book-list\">\r\n      <ul>\r\n        {books.map((book) => {\r\n          return <BookDetails key={book.id} book={book} />;\r\n        })}\r\n      </ul>\r\n    </div>\r\n  ) : (\r\n    <div className=\"empty\">No books to complete, Hello free time :)</div>\r\n  );\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport { BookContext } from \"../contexts/BookContext\";\r\n\r\nconst BookForm = () => {\r\n  const { addBook } = useContext(BookContext);\r\n  //use state\r\n  const [title, setTitle] = useState(\"\");\r\n  const [author, setAuthor] = useState(\"\");\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    addBook(title, author);\r\n    setAuthor(\"\");\r\n    setTitle(\"\");\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Book title\"\r\n        value={title}\r\n        onChange={(e) => setTitle(e.target.value)}\r\n        required\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Book author\"\r\n        value={author}\r\n        onChange={(e) => setAuthor(e.target.value)}\r\n        required\r\n      />\r\n      <input type=\"submit\" value=\"add book\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default BookForm;\r\n","import React from \"react\";\nimport BookContextProvider from \"./contexts/BookContext\";\nimport Navbar from \"./components/Navbar\";\nimport { BookList } from \"./components/BookList\";\nimport BookForm from \"./components/BookForm\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <Navbar />\n        <BookList />\n        <BookForm />\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}